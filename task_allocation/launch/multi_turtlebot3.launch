<launch>
  <arg name="model" default="burger" />
  <arg name="x1" default="0.0" />
  <arg name="y1" default="0.0" />
  <arg name="x2" default="4.0" />
  <arg name="y2" default="0.0" />
  <arg name="x3" default="-4.0" />
  <arg name="y3" default="0.0" />
  <arg name="move_forward_only" default="false"/>
  <arg name="map_file" default="$(find task_allocation)/map/map2_small.yaml"/>
  <arg name="robot1_name" default="robot1"/>
  <arg name="robot2_name" default="robot2"/>
  <arg name="robot3_name" default="robot3"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find task_allocation)/world/map2_small.world"/>
      <arg name="paused" value="false"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="gui" value="true"/>
      <arg name="headless" value="false"/>
      <arg name="debug" value="false"/>
  </include>

  <!-- Map server -->
<node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" output="screen"/>


     <!-- AMCL -->
    <include file="$(find task_allocation)/launch/amcl.launch">
    <arg name="robot_name"     value="robot1"/>
      <arg name="initial_pose_x" value="$(arg x1)"/>
      <arg name="initial_pose_y" value="$(arg y1)"/>
      <arg name="initial_pose_a" value="0.0"/>
      
      </include>
  <group ns="$(arg robot1_name)">

    <param name="robot_description" command="$(find xacro)/xacro '$(find task_allocation)/urdf/turtlebot3_burger.urdf.xacro' robot_namespace:=robot1" />
    <node name="spawn_robot1" pkg="gazebo_ros" type="spawn_model" args="-urdf -model robot1 -x $(arg x1) -y $(arg y1) -param robot_description" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="tf_prefix" value="robot1" />

    
     <!-- <param name="publish_frequency" type="double" value="50.0"/> -->
        
    </node>
 
    <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find task_allocation)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/move_base_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />

        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />

        <param name="global_costmap/robot_base_frame" value="$(arg robot1_name)/base_link"/>
        <param name="local_costmap/robot_base_frame" value="$(arg robot1_name)/base_link"/>
        <param name="global_costmap/global_frame" value="map"/> 
        <param name="local_costmap/global_frame" value="$(arg robot1_name)/odom"/>
        <param name="DWAPlannerROS/odom_topic" value="$(arg robot1_name)/odom" /> 
        <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
        </node>
  </group>

     <!-- AMCL -->
    <include file="$(find task_allocation)/launch/amcl.launch">
    <arg name="robot_name"     value="robot2"/>
      <arg name="initial_pose_x" value="$(arg x2)"/>
      <arg name="initial_pose_y" value="$(arg y2)"/>
      <arg name="initial_pose_a" value="0.0"/>
      </include>
  <group ns="$(arg robot2_name)">
 
    <param name="robot_description" command="$(find xacro)/xacro '$(find task_allocation)/urdf/turtlebot3_burger.urdf.xacro' robot_namespace:=robot2" />
    <node name="spawn_robot2" pkg="gazebo_ros" type="spawn_model" args="-urdf -model robot2 -x $(arg x2) -y $(arg y2) -param robot_description" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="tf_prefix" value="robot2" />
    <!-- <remap from="/odom" to="/robot2/odom" /> -->
      </node>
        <!-- <param name="publish_frequency" type="double" value="50.0"/> -->
 
        
    

    <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen" >
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find task_allocation)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/move_base_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />

           <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />

        <param name="global_costmap/robot_base_frame" value="$(arg robot2_name)/base_link"/>
        <param name="local_costmap/robot_base_frame" value="$(arg robot2_name)/base_link"/>
        <param name="global_costmap/global_frame" value="map"/> 
        <param name="local_costmap/global_frame" value="$(arg robot2_name)/odom"/>
        <param name="DWAPlannerROS/odom_topic" value="$(arg robot2_name)/odom" />
        <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

    </node>
  </group>
     <!-- AMCL -->
    <include file="$(find task_allocation)/launch/amcl.launch">
    <arg name="robot_name"     value="robot3"/>
    <arg name="initial_pose_x" value="$(arg x3)"/>
    <arg name="initial_pose_y" value="$(arg y3)"/>
    <arg name="initial_pose_a" value="0.0"/>
      </include>
  <group ns="$(arg robot3_name)">
    <param name="robot_description" command="$(find xacro)/xacro '$(find task_allocation)/urdf/turtlebot3_burger.urdf.xacro' robot_namespace:=robot3" />
    <node name="spawn_robot3" pkg="gazebo_ros" type="spawn_model" args="-urdf -model robot3 -x $(arg x3) -y $(arg y3) -param robot_description" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
        <!-- <param name="publish_frequency" type="double" value="50.0"/> -->
      <param name="tf_prefix" value="robot3" />

      </node>
        
    <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen" >
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find task_allocation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find task_allocation)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/move_base_params.yaml" command="load" />
        <rosparam file="$(find task_allocation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />



          <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />

        <param name="global_costmap/robot_base_frame" value="$(arg robot3_name)/base_link"/>
        <param name="local_costmap/robot_base_frame" value="$(arg robot3_name)/base_link"/>
        <param name="global_costmap/global_frame" value="map"/> 
        <param name="local_costmap/global_frame" value="$(arg robot3_name)/odom"/>
        <param name="DWAPlannerROS/odom_topic" value="$(arg robot3_name)/odom" />
        <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

    </node>
  </group>
    <!-- rviz -->
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find task_allocation)/rviz/rviz.rviz"/>
</launch>